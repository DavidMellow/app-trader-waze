/*SELECT a_store.name AS a_name, p_store.name AS p_name,
	ROUND(AVG(a_store.rating),1)AS a_avg_rate,
	ROUND(AVG(p_store.rating),1)AS p_avg_rate
FROM app_store_apps AS a_store
LEFT JOIN play_store_apps AS p_store
ON a_store.name = p_store.name 
GROUP BY a_store.name, p_store.name;
SELECT a_avg_rate, p_avg_rate, a_lifespan, p_lifespan*/
/*SELECT
	DISTINCT(a.name),
	(1+.5*a.rating)*12 AS proj_mo_ls, --projected lifespan of app (in months); round to nearest .5
	.5*(5000*(1+.5*a.rating)*12) AS half_proj_mo_earn, --app trader gets 1/2 of projected monthly earnings
	10000 * a.price AS purch_price, --purchase price is $10,000 * app price, but app price <= $1, then purchase price is $10,000
	1000*(1+.5*a.rating)*12 AS proj_mo_cost, --projected monthly maintenance cost is $1000 * lifespan in months
	a.rating - (1000 * a.price + 1000 *(1+.5*a.rating)*12) AS total_proj_rev,
	primary_genre AS app_genre,
	p.genres AS play_genre,
	a.content_rating AS app_content_rating,
	p.content_rating AS play_content_rating
FROM app_store_apps AS a
INNER JOIN play_store_apps AS p
ON p.name = a.name
ORDER BY total_proj_rev DESC;*/
/*WITH cte_prr AS (
	SELECT ROUND (rating/5,1) *5 AS prr, name
	FROM play_store_apps),
cte_als AS(
	SELECT ROUND(12*(rating/.5)+12,0) AS als, name
	FROM app_store_apps)
SELECT * 
FROM cte_prr JOIN cte_als USING (name);

SELECT CAST (rating AS numeric)
FROM app_store_apps;

SELECT CAST (price AS money)
FROM play_store_apps;*/

WITH cte_prr AS (
	SELECT ROUND (rating/5,1) *5 AS prr, name --rounds play store ratings tenth's place to .0 or .5
	FROM play_store_apps),
cte_als AS(
	SELECT ROUND(12*(rating/.5)+12,0) AS als, name --calculates app store life span in months
	FROM app_store_apps)

SELECT
	DISTINCT a.name AS app_name,
--app store columns	
	(((.5*5000)* ROUND(12*(a.rating/.5)+12,0))- (10000 * a.price) - (1000*(1+.5*a.rating)*12)) AS a_proj_net_profit,--projected life span rev.
	cte_als AS a_proj_mo_ls, --projected monthly lifespan 
	(.5*5000)* ROUND(12*(a.rating/.5)+12,0) AS a_proj_ls_earn, --app trader's proj lifespan earnings
	(SELECT 
	 	CASE  
	 		WHEN a.price <= 1.00 THEN  10000
	 		ELSE 10000 * a.price 
	   		END AS a_purch_price),--purchase price is $10,000 * app price, but app price <= $1, then purchase price is $10,000
	1000*(1+.5*a.rating)*12 AS a_proj_ls_maint_cost, --proj monthly maintenance cost is $1000 * lifespan in months
	primary_genre AS app_genre,
	a.content_rating AS app_content_rating,
--play store columns
	(((.5*5000)* ROUND(12*(p.rating/.5)+12,0))- (10000 * a.price) - (1000*(1+.5* prr)*12)) AS p_proj_net_profit,--projected life span rev.
	ROUND(12*(p.rating/.5)+12,0) AS p_proj_mo_ls, --projected monthly lifespan **NEED TO CHANGE a.price to p.price
	(.5*5000)* ROUND(12*(p.rating/.5)+12,0) AS p_proj_ls_earn, --app trader's proj lifespan earnings
	/*(SELECT 
	 	CASE  
	 		WHEN p.price <= 1.00 THEN  10000
	 		ELSE 10000 * p.price 
	   		END AS a_purch_price), --$10,000 * app price, but if app price <= $1, then $10,000 NEED TO ADD CASE STATMENT **NEED TO CHANGE a.price to p.price*/
	
	
	/*(SELECT ROUND (p.rating/5,1) *5 AS rounded_rate
	FROM play_store_apps)AS p*/
	
	
	
	1000*(1+.5*p.rating)*12 AS p_proj_ls_maint_cost, --proj monthly maintenance cost is $1000 * lifespan in months
	p.genres AS play_genre,
	p.content_rating AS play_content_rating
FROM app_store_apps AS a
INNER JOIN play_store_apps AS p
ON p.name = a.name
INNER JOIN cte_prr
ON p.name = cte_prr.name 
INNER JOIN cte_als
ON p.name = cte_als.name
ORDER BY a_proj_net_profit DESC;